import pika # needed to send messages out via RabbitMQ
import threading # needed for multi threads
import gpiozero # needed for motor control
import time # needed for sleep

class MotorController:
    """
    Class that controls the motors for the rover
    """

    def __init__(self, maxSpeed = 1):
        """
        Initialization method

        Args:
            maxSpeed (float): the max speed of the motors, a decimal value from zero to one
        """

        self.maxSpeed = maxSpeed
        self.movementList = []

        self.turnRate = 120.0 # turns 360 degrees in 3 seconds

        #Set up the four motors
        self.frontRight = gpiozero.Motor(11, 9)
        self.backRight = gpiozero.Motor(19, 26)
        self.frontLeft = gpiozero.Motor(12, 16)
        self.backLeft = gpiozero.Motor (21, 20)

        # zero out all speed
        self.frontLeft.forward(0)
        self.frontRight.forward(0)
        self.backLeft.forward(0)
        self.backRight.forward(0)

    def processMessage(self, message):
        """
        Processes a command message generated by the LLM and adds it to the movement list

        Args:
            message (str): The movement command
        """
        
        print("Adding message")

        self.movementList.append(message)

    def moveIt(self):
        """
        Thread that drives the rover
        """
        
        print("moveIt started")

        while True:
            # zero out all speed
            self.frontLeft.forward(0)
            self.frontRight.forward(0)
            self.backLeft.forward(0)
            self.backRight.forward(0)

            time.sleep(1)

            while len(self.movementList) > 0:
                
                print("Running movement command")

                move = str(self.movementList[0]).split()

                if len(move) != 3: # incorrect format
                    print(f"Error, {self.movementList[0]} formatted incorrectly")
                else:
                    if move[0] == "Forward":
                        try:
                            runTime = float(move[2])
                            if runTime > 10:
                                runTime = 10
                            
                            self.frontLeft.forward(self.maxSpeed)
                            self.frontRight.forward(self.maxSpeed)
                            self.backLeft.forward(self.maxSpeed)
                            self.backRight.forward(self.maxSpeed)

                            time.sleep(runTime)

                            self.frontLeft.forward(0)
                            self.frontRight.forward(0)
                            self.backLeft.forward(0)
                            self.backRight.forward(0)
                        except ValueError:
                            print("Time was not represented as a float in forward message")
                            
                    elif move[0] == "Reverse":
                        try:
                            runTime = float(move[2])
                            if runTime > 10:
                                runTime = 10
                            
                            self.frontLeft.backward(self.maxSpeed)
                            self.frontRight.backward(self.maxSpeed)
                            self.backLeft.backward(self.maxSpeed)
                            self.backRight.backward(self.maxSpeed)

                            time.sleep(runTime)

                            self.frontLeft.forward(0)
                            self.frontRight.forward(0)
                            self.backLeft.forward(0)
                            self.backRight.forward(0)
                        except ValueError:
                            print("Time was not represented as a float in backward message")

                    elif move[0] == "Turn":
                        try:
                            angle = float(move[1])

                            movementTime = abs(angle/self.turnRate)

                            if angle > 0: # Turn right
                                self.frontLeft.forward(self.maxSpeed)
                                self.frontRight.backward(self.maxSpeed)
                                self.backLeft.forward(self.maxSpeed)
                                self.backRight.backward(self.maxSpeed)
                            else: # Turn left
                                self.frontLeft.backward(self.maxSpeed)
                                self.frontRight.forward(self.maxSpeed)
                                self.backLeft.backward(self.maxSpeed)
                                self.backRight.forward(self.maxSpeed)

                            time.sleep(movementTime)

                            self.frontLeft.forward(0)
                            self.frontRight.forward(0)
                            self.backLeft.forward(0)
                            self.backRight.forward(0)

                        except ValueError:
                            print("Angle was not represented as a float in turn message")
                    else:
                        print(f"Error, {str(move[0])} unknown")
                
                self.movementList.pop(0)


